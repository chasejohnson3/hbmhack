# -*- coding: utf-8 -*-
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

import pydra
from pydra.engine import specs
import attr


input_fields = [
    (
        "integer", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--integer %d",
                "help_string": "An integer without constraints"
            }
        ),
    ),
    (
        "double", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--double %f",
                "help_string": "A double with constraints"
            }
        ),
    ),
    (
        "floatVector", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--floatVector %s",
                "help_string": "A vector of floats"
            }
        ),
    ),
    (
        "string_vector", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--string_vector %s",
                "help_string": "A vector of strings"
            }
        ),
    ),
    (
        "enumeration", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--enumeration %s",
                "help_string": "An enumeration of strings"
            }
        ),
    ),
    (
        "boolean1", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--boolean1 ",
                "help_string": "A boolean default true"
            }
        ),
    ),
    (
        "boolean2", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--boolean2 ",
                "help_string": "A boolean default false"
            }
        ),
    ),
    (
        "boolean3", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--boolean3 ",
                "help_string": "A boolean with no default, should be defaulting to false"
            }
        ),
    ),
    (
        "file1", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--file1 %s",
                "help_string": "An input file"
            }
        ),
    ),
    (
        "files", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--files %s...",
                "help_string": "Multiple input files"
            }
        ),
    ),
    (
        "outputFile1", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputFile1 %s",
                "help_string": "An output file"
            }
        ),
    ),
    (
        "directory1", 
        attr.ib(
            type=Directory,
            metadata={
                "argstr": "--directory1 %s",
                "help_string": "An input directory. If no default is specified, the current directory is used,"
            }
        ),
    ),
    (
        "image1", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--image1 %s",
                "help_string": "An input image"
            }
        ),
    ),
    (
        "image2", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--image2 %s",
                "help_string": "An output image"
            }
        ),
    ),
    (
        "transformInput", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--transformInput %s",
                "help_string": "A generic input transform"
            }
        ),
    ),
    (
        "transform1", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--transform1 %s",
                "help_string": "A linear input transform"
            }
        ),
    ),
    (
        "transformInputNonlinear", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--transformInputNonlinear %s",
                "help_string": "A nonlinear input transform"
            }
        ),
    ),
    (
        "transformInputBspline", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--transformInputBspline %s",
                "help_string": "A bspline input transform"
            }
        ),
    ),
    (
        "transformOutput", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--transformOutput %s",
                "help_string": "A generic output transform"
            }
        ),
    ),
    (
        "transform2", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--transform2 %s",
                "help_string": "A linear output transform"
            }
        ),
    ),
    (
        "transformOutputNonlinear", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--transformOutputNonlinear %s",
                "help_string": "A nonlinear output transform"
            }
        ),
    ),
    (
        "transformOutputBspline", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--transformOutputBspline %s",
                "help_string": "A bspline output transform"
            }
        ),
    ),
    (
        "seed", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--seed %s...",
                "help_string": "Lists of points in the CLI correspond to slicer fiducial lists"
            }
        ),
    ),
    (
        "seedsFile", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--seedsFile %s",
                "help_string": "Test file of input fiducials, compared to seeds"
            }
        ),
    ),
    (
        "seedsOutFile", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--seedsOutFile %s",
                "help_string": "Output file to read back in, compare to seeds with flipped settings on first fiducial"
            }
        ),
    ),
    (
        "inputModel", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputModel %s",
                "help_string": "Input model"
            }
        ),
    ),
    (
        "outputModel", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputModel %s",
                "help_string": "Output model"
            }
        ),
    ),
    (
        "modelSceneFile", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--modelSceneFile %s...",
                "help_string": "Generated models, under a model hierarchy node. Models are imported into Slicer under a model hierarchy node. The model hierarchy node must be created before running the model maker, by selecting Create New ModelHierarchy from the Models drop down menu."
            }
        ),
    ),
    (
        "arg0", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "First index argument is an image",
                "position": -2
            }
        ),
    ),
    (
        "arg1", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Second index argument is an image",
                "position": -1
            }
        ),
    ),
    (
        "region", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--region %s...",
                "help_string": "List of regions to process"
            }
        ),
    ),
    (
        "inputFA", 
        attr.ib(
            type=traits.List,
            metadata={
                "argstr": "--inputFA %s",
                "help_string": "Array of FA values to process"
            }
        ),
    ),
    (
        "outputFA", 
        attr.ib(
            type=traits.List,
            metadata={
                "argstr": "--outputFA %s",
                "help_string": "Array of processed (output) FA values"
            }
        ),
    ),
    (
        "inputDT", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputDT %s",
                "help_string": "Array of Table values to process"
            }
        ),
    ),
    (
        "outputDT", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputDT %s",
                "help_string": "Array of processed (output) Table values"
            }
        ),
    ),
    (
        "anintegerreturn", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--anintegerreturn %d",
                "help_string": "An example of an integer return type"
            }
        ),
    ),
    (
        "abooleanreturn", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--abooleanreturn ",
                "help_string": "An example of a boolean return type"
            }
        ),
    ),
    (
        "afloatreturn", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--afloatreturn %f",
                "help_string": "An example of a float return type"
            }
        ),
    ),
    (
        "adoublereturn", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--adoublereturn %f",
                "help_string": "An example of a double return type"
            }
        ),
    ),
    (
        "astringreturn", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--astringreturn %s",
                "help_string": "An example of a string return type"
            }
        ),
    ),
    (
        "anintegervectorreturn", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--anintegervectorreturn %s",
                "help_string": "An example of an integer vector return type"
            }
        ),
    ),
    (
        "astringchoicereturn", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--astringchoicereturn %s",
                "help_string": "An enumeration of strings as a return type"
            }
        ),
    ),
]

output_fields = [
    (
        "outputFile1", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "An output file",
                "exists": True
            }
        ),
    ),
    (
        "image2", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "An output image",
                "exists": True
            }
        ),
    ),
    (
        "transformOutput", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "A generic output transform",
                "exists": True
            }
        ),
    ),
    (
        "transform2", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "A linear output transform",
                "exists": True
            }
        ),
    ),
    (
        "transformOutputNonlinear", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "A nonlinear output transform",
                "exists": True
            }
        ),
    ),
    (
        "transformOutputBspline", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "A bspline output transform",
                "exists": True
            }
        ),
    ),
    (
        "outputModel", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Output model",
                "exists": True
            }
        ),
    ),
    (
        "modelSceneFile", 
        attr.ib(
            type=OutputMultiPath,
            metadata={
                "help_string": "Generated models, under a model hierarchy node. Models are imported into Slicer under a model hierarchy node. The model hierarchy node must be created before running the model maker, by selecting Create New ModelHierarchy from the Models drop down menu.",
                "exists": True
            }
        ),
    ),
    (
        "arg1", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Second index argument is an image",
                "position": -1,
                "exists": True
            }
        ),
    ),
    (
        "outputDT", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Array of processed (output) Table values",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

ExecutionModelTour_task = pydra.ShellCommandTask(
    name="ExecutionModelTour",
    executable=" ExecutionModelTour ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)