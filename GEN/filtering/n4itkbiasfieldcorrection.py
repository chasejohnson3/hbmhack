# -*- coding: utf-8 -*-
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

import pydra
from pydra.engine import specs
import attr


input_fields = [
    (
        "inputImageName", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Input image where you observe signal inhomegeneity",
                "position": -2
            }
        ),
    ),
    (
        "maskimage", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--maskimage %s",
                "help_string": "Binary mask that defines the structure of your interest. NOTE: This parameter is OPTIONAL. If the mask is not specified, the module will use internally Otsu thresholding to define this mask. Better processing results can often be obtained when a meaningful mask is defined."
            }
        ),
    ),
    (
        "outputImageName", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Result of processing",
                "position": -1
            }
        ),
    ),
    (
        "outputbiasfield", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputbiasfield %s",
                "help_string": "Recovered bias field (OPTIONAL)"
            }
        ),
    ),
    (
        "meshresolution", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--meshresolution %s",
                "help_string": "Resolution of the initial bspline grid defined as a sequence of three numbers. The actual resolution will be defined by adding the bspline order (default is 3) to the resolution in each dimension specified here. For example, 1,1,1 will result in a 4x4x4 grid of control points. This parameter may need to be adjusted based on your input image. In the multi-resolution N4 framework, the resolution of the bspline grid at subsequent iterations will be doubled. The number of resolutions is implicitly defined by Number of iterations parameter (the size of this list is the number of resolutions)"
            }
        ),
    ),
    (
        "splinedistance", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--splinedistance %f",
                "help_string": "An alternative means to define the spline grid, by setting the distance between the control points. This parameter is used only if the grid resolution is not specified."
            }
        ),
    ),
    (
        "bffwhm", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--bffwhm %f",
                "help_string": "Bias field Full Width at Half Maximum. Zero implies use of the default value."
            }
        ),
    ),
    (
        "iterations", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--iterations %s",
                "help_string": "Maximum number of iterations at each level of resolution. Larger values will increase execution time, but may lead to better results."
            }
        ),
    ),
    (
        "convergencethreshold", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--convergencethreshold %f",
                "help_string": "Stopping criterion for the iterative bias estimation. Larger values will lead to smaller execution time."
            }
        ),
    ),
    (
        "bsplineorder", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--bsplineorder %d",
                "help_string": "Order of B-spline used in the approximation. Larger values will lead to longer execution times, may result in overfitting and poor result."
            }
        ),
    ),
    (
        "shrinkfactor", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--shrinkfactor %d",
                "help_string": "Defines how much the image should be upsampled before estimating the inhomogeneity field. Increase if you want to reduce the execution time. 1 corresponds to the original resolution. Larger values will significantly reduce the computation time."
            }
        ),
    ),
    (
        "weightimage", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--weightimage %s",
                "help_string": "Weight Image"
            }
        ),
    ),
    (
        "wienerfilternoise", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--wienerfilternoise %f",
                "help_string": "Wiener filter noise. Zero implies use of the default value."
            }
        ),
    ),
    (
        "nhistogrambins", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--nhistogrambins %d",
                "help_string": "Number of histogram bins. Zero implies use of the default value."
            }
        ),
    ),
]

output_fields = [
    (
        "outputImageName", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Result of processing",
                "position": -1,
                "exists": True
            }
        ),
    ),
    (
        "outputbiasfield", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Recovered bias field (OPTIONAL)",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

N4ITKBiasFieldCorrection_task = pydra.ShellCommandTask(
    name="N4ITKBiasFieldCorrection",
    executable=" N4ITKBiasFieldCorrection ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)