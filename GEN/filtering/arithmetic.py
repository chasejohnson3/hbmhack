# -*- coding: utf-8 -*-
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

import pydra
from pydra.engine import specs
import attr


input_fields = [
    (
        "inputVolume1", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Input volume 1",
                "position": -3
            }
        ),
    ),
    (
        "inputVolume2", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Input volume 2",
                "position": -2
            }
        ),
    ),
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Volume1 + Volume2",
                "position": -1
            }
        ),
    ),
    (
        "order", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--order %s",
                "help_string": "Interpolation order if two images are in different coordinate frames or have different sampling."
            }
        ),
    ),
]

output_fields = [
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Volume1 + Volume2",
                "position": -1,
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

AddScalarVolumes_task = pydra.ShellCommandTask(
    name="AddScalarVolumes",
    executable=" AddScalarVolumes ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "InputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Input volume, the volume to cast.",
                "position": -2
            }
        ),
    ),
    (
        "OutputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Output volume, cast to the new type.",
                "position": -1
            }
        ),
    ),
    (
        "type", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--type %s",
                "help_string": "Scalar data type for the new output volume."
            }
        ),
    ),
]

output_fields = [
    (
        "OutputVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Output volume, cast to the new type.",
                "position": -1,
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

CastScalarVolume_task = pydra.ShellCommandTask(
    name="CastScalarVolume",
    executable=" CastScalarVolume ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "InputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Input volume to be masked",
                "position": -3
            }
        ),
    ),
    (
        "MaskVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Label volume containing the mask",
                "position": -2
            }
        ),
    ),
    (
        "OutputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Output volume: Input Volume masked by label value from Mask Volume",
                "position": -1
            }
        ),
    ),
    (
        "label", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--label %d",
                "help_string": "Label value in the Mask Volume to use as the mask"
            }
        ),
    ),
    (
        "replace", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--replace %d",
                "help_string": "Value to use for the output volume outside of the mask"
            }
        ),
    ),
]

output_fields = [
    (
        "OutputVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Output volume: Input Volume masked by label value from Mask Volume",
                "position": -1,
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

MaskScalarVolume_task = pydra.ShellCommandTask(
    name="MaskScalarVolume",
    executable=" MaskScalarVolume ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "inputVolume1", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Input volume 1",
                "position": -3
            }
        ),
    ),
    (
        "inputVolume2", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Input volume 2",
                "position": -2
            }
        ),
    ),
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Volume1 * Volume2",
                "position": -1
            }
        ),
    ),
    (
        "order", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--order %s",
                "help_string": "Interpolation order if two images are in different coordinate frames or have different sampling."
            }
        ),
    ),
]

output_fields = [
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Volume1 * Volume2",
                "position": -1,
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

MultiplyScalarVolumes_task = pydra.ShellCommandTask(
    name="MultiplyScalarVolumes",
    executable=" MultiplyScalarVolumes ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "inputVolume1", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Input volume 1",
                "position": -3
            }
        ),
    ),
    (
        "inputVolume2", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Input volume 2",
                "position": -2
            }
        ),
    ),
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Volume1 - Volume2",
                "position": -1
            }
        ),
    ),
    (
        "order", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--order %s",
                "help_string": "Interpolation order if two images are in different coordinate frames or have different sampling."
            }
        ),
    ),
]

output_fields = [
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Volume1 - Volume2",
                "position": -1,
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

SubtractScalarVolumes_task = pydra.ShellCommandTask(
    name="SubtractScalarVolumes",
    executable=" SubtractScalarVolumes ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)