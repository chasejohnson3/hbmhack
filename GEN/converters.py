# -*- coding: utf-8 -*-
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

import pydra
from pydra.engine import specs
import attr


input_fields = [
    (
        "patientName", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--patientName %s",
                "help_string": "The name of the patient (0010,0010)"
            }
        ),
    ),
    (
        "patientID", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--patientID %s",
                "help_string": "The patient ID (0010,0020)"
            }
        ),
    ),
    (
        "patientBirthDate", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--patientBirthDate %s",
                "help_string": "Patient birth date (0010,0030)"
            }
        ),
    ),
    (
        "patientSex", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--patientSex %s",
                "help_string": "Patient sex (0010,0040)"
            }
        ),
    ),
    (
        "patientComments", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--patientComments %s",
                "help_string": "Patient comments (0010,4000)"
            }
        ),
    ),
    (
        "studyID", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--studyID %s",
                "help_string": "The study ID (0020,0010)"
            }
        ),
    ),
    (
        "studyDate", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--studyDate %s",
                "help_string": "The date of the study (0008,0020)"
            }
        ),
    ),
    (
        "studyTime", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--studyTime %s",
                "help_string": "The time of the study (0008,0030)"
            }
        ),
    ),
    (
        "studyComments", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--studyComments %s",
                "help_string": "Study comments (0032,4000)"
            }
        ),
    ),
    (
        "studyDescription", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--studyDescription %s",
                "help_string": "Study description (0008,1030)"
            }
        ),
    ),
    (
        "modality", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--modality %s",
                "help_string": "Modality (0008,0060)"
            }
        ),
    ),
    (
        "manufacturer", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--manufacturer %s",
                "help_string": "Manufacturer (0008,0070)"
            }
        ),
    ),
    (
        "model", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--model %s",
                "help_string": "model (0008,1090)"
            }
        ),
    ),
    (
        "seriesNumber", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--seriesNumber %s",
                "help_string": "The series number (0020,0011)"
            }
        ),
    ),
    (
        "seriesDescription", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--seriesDescription %s",
                "help_string": "Series description (0008,103E)"
            }
        ),
    ),
    (
        "seriesDate", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--seriesDate %s",
                "help_string": "The date of the series (0008,0021)"
            }
        ),
    ),
    (
        "seriesTime", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--seriesTime %s",
                "help_string": "The time of the series (0008,0031)"
            }
        ),
    ),
    (
        "rescaleIntercept", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--rescaleIntercept %f",
                "help_string": "Rescale interscept (0028,1052). Converts pixel values on disk to pixel values in memory. (Pixel value in memory) = (Pixel value on disk) * rescaleSlope + rescaleIntercept.  Default is 0.0. Data values are converted on write (the data is scaled and shifted so that the slope and interscept will bring it back to the current intensity range)."
            }
        ),
    ),
    (
        "rescaleSlope", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--rescaleSlope %f",
                "help_string": "Rescale slope (0028,1053). Converts pixel values on disk to pixel values in memory. (Pixel value in memory) = (Pixel value on disk) * rescaleSlope + rescaleInterscept.  Default is 1.0. Data values are converted on write (the data is scaled and shifted so that the slope and interscept will bring it back to the current intensity range)."
            }
        ),
    ),
    (
        "contentDate", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--contentDate %s",
                "help_string": "The date of the image content (0008,0023)"
            }
        ),
    ),
    (
        "contentTime", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--contentTime %s",
                "help_string": "The time of the image content (0008,0033)"
            }
        ),
    ),
    (
        "studyInstanceUID", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--studyInstanceUID %s",
                "help_string": "The study instance UID (0020,000d)"
            }
        ),
    ),
    (
        "seriesInstanceUID", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--seriesInstanceUID %s",
                "help_string": "The series instance UID (0020,000e)"
            }
        ),
    ),
    (
        "frameOfReferenceInstanceUID", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--frameOfReferenceInstanceUID %s",
                "help_string": "The frame of reference instance UID (0020,0052)"
            }
        ),
    ),
    (
        "inputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Input volume to be resampled",
                "position": -1
            }
        ),
    ),
    (
        "dicomDirectory", 
        attr.ib(
            type=Directory,
            metadata={
                "argstr": "--dicomDirectory %s",
                "help_string": "The directory to contain the DICOM series."
            }
        ),
    ),
    (
        "dicomPrefix", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--dicomPrefix %s",
                "help_string": "The prefix of the DICOM filename."
            }
        ),
    ),
    (
        "dicomNumberFormat", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--dicomNumberFormat %s",
                "help_string": "The printf-style format to be used when creating the per-slice DICOM filename."
            }
        ),
    ),
    (
        "reverseImages", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--reverseImages ",
                "help_string": "Reverse the slices."
            }
        ),
    ),
    (
        "useCompression", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--useCompression ",
                "help_string": "Compress the output pixel data."
            }
        ),
    ),
    (
        "type", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--type %s",
                "help_string": "Type for the new output volume."
            }
        ),
    ),
]

output_fields = [
    (
        "dicomDirectory", 
        attr.ib(
            type=Directory,
            metadata={
                "help_string": "The directory to contain the DICOM series.",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

CreateDICOMSeries_task = pydra.ShellCommandTask(
    name="CreateDICOMSeries",
    executable=" CreateDICOMSeries ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "inputVolume1", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputVolume1 %s",
                "help_string": "First input volume (.nhdr or .nrrd)"
            }
        ),
    ),
    (
        "inputVolume2", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputVolume2 %s",
                "help_string": "Second input volume (.nhdr or .nrrd)"
            }
        ),
    ),
    (
        "useIdentityMeasurementFrame", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--useIdentityMeasurementFrame ",
                "help_string": "Do comparisons with identity mesasurement frames"
            }
        ),
    ),
]

output_fields = [
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))


DWICompare_task = pydra.ShellCommandTask(
    name="DWICompare",
    executable=" DWICompare ", 
    input_spec=input_spec_pdr,
    
)

input_fields = [
    (
        "inputVolume1", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputVolume1 %s",
                "help_string": "First input volume (.nhdr or .nrrd)"
            }
        ),
    ),
    (
        "inputVolume2", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputVolume2 %s",
                "help_string": "Second input volume (.nhdr or .nrrd)"
            }
        ),
    ),
    (
        "checkDWIData", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--checkDWIData ",
                "help_string": "check for existence of DWI data, and if present, compare it"
            }
        ),
    ),
]

output_fields = [
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))


DWISimpleCompare_task = pydra.ShellCommandTask(
    name="DWISimpleCompare",
    executable=" DWISimpleCompare ", 
    input_spec=input_spec_pdr,
    
)

input_fields = [
    (
        "inputVolume1", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Input volume 1",
                "position": -2
            }
        ),
    ),
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "The oriented volume",
                "position": -1
            }
        ),
    ),
    (
        "orientation", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--orientation %s",
                "help_string": "Orientation choices"
            }
        ),
    ),
]

output_fields = [
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "The oriented volume",
                "position": -1,
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

OrientScalarVolume_task = pydra.ShellCommandTask(
    name="OrientScalarVolume",
    executable=" OrientScalarVolume ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)