# -*- coding: utf-8 -*-
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

import pydra
from pydra.engine import specs
import attr


input_fields = [
    (
        "inputVolumes", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--inputVolumes %s...",
                "help_string": "The list of input image files to be segmented."
            }
        ),
    ),
    (
        "atlasDefinition", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--atlasDefinition %s",
                "help_string": "Contains all parameters for Atlas"
            }
        ),
    ),
    (
        "restoreState", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--restoreState %s",
                "help_string": "The initial state for the registration process"
            }
        ),
    ),
    (
        "saveState", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--saveState %s",
                "help_string": "(optional) Filename to which save the final state of the registration"
            }
        ),
    ),
    (
        "inputVolumeTypes", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--inputVolumeTypes %s",
                "help_string": "The list of input image types corresponding to the inputVolumes."
            }
        ),
    ),
    (
        "outputDir", 
        attr.ib(
            type=Directory,
            metadata={
                "argstr": "--outputDir %s",
                "help_string": "Ouput directory"
            }
        ),
    ),
    (
        "atlasToSubjectTransformType", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--atlasToSubjectTransformType %s",
                "help_string": " What type of linear transform type do you want to use to register the atlas to the reference subject image."
            }
        ),
    ),
    (
        "atlasToSubjectTransform", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--atlasToSubjectTransform %s",
                "help_string": "The transform from atlas to the subject"
            }
        ),
    ),
    (
        "atlasToSubjectInitialTransform", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--atlasToSubjectInitialTransform %s",
                "help_string": "The initial transform from atlas to the subject"
            }
        ),
    ),
    (
        "subjectIntermodeTransformType", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--subjectIntermodeTransformType %s",
                "help_string": " What type of transform type do you want to run intra subject registeration. Only Identity and Rigid are allowed."
            }
        ),
    ),
    (
        "outputVolumes", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--outputVolumes %s...",
                "help_string": "Corrected Output Images: should specify the same number of images as inputVolume, if only one element is given, then it is used as a file pattern where %s is replaced by the imageVolumeType, and %d by the index list location."
            }
        ),
    ),
    (
        "outputLabels", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputLabels %s",
                "help_string": "Output Label Image"
            }
        ),
    ),
    (
        "outputDirtyLabels", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputDirtyLabels %s",
                "help_string": "Output Dirty Label Image"
            }
        ),
    ),
    (
        "posteriorTemplate", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--posteriorTemplate %s",
                "help_string": "filename template for Posterior output files"
            }
        ),
    ),
    (
        "outputFormat", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--outputFormat %s",
                "help_string": "Output format"
            }
        ),
    ),
    (
        "interpolationMode", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--interpolationMode %s",
                "help_string": "Type of interpolation to be used when applying transform to moving volume.  Options are Linear, NearestNeighbor, BSpline, WindowedSinc, or ResampleInPlace.  The ResampleInPlace option will create an image with the same discrete voxel values and will adjust the origin and direction of the physical space interpretation."
            }
        ),
    ),
    (
        "maxIterations", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--maxIterations %d",
                "help_string": "Filter iterations"
            }
        ),
    ),
    (
        "medianFilterSize", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--medianFilterSize %s",
                "help_string": "The radius for the optional MedianImageFilter preprocessing in all 3 directions."
            }
        ),
    ),
    (
        "filterIteration", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--filterIteration %d",
                "help_string": "Filter iterations"
            }
        ),
    ),
    (
        "filterTimeStep", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--filterTimeStep %f",
                "help_string": "Filter time step should be less than (PixelSpacing/(1^(DIM+1)), value is set to negative, then allow automatic setting of this value. "
            }
        ),
    ),
    (
        "filterMethod", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--filterMethod %s",
                "help_string": "Filter method for preprocessing of registration"
            }
        ),
    ),
    (
        "maxBiasDegree", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--maxBiasDegree %d",
                "help_string": "Maximum bias degree"
            }
        ),
    ),
    (
        "useKNN", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--useKNN ",
                "help_string": "Use the KNN stage of estimating posteriors."
            }
        ),
    ),
    (
        "purePlugsThreshold", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--purePlugsThreshold %f",
                "help_string": "If this threshold value is greater than zero, only pure samples are used to compute the distributions in EM classification, and only pure samples are used for KNN training. The default value is set to 0, that means not using pure plugs. However, a value between 0 and 1 should be set as the threshold if you want to activate using pure plugs option. Empirically a value of 0.1 is suggested."
            }
        ),
    ),
    (
        "numberOfSubSamplesInEachPlugArea", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--numberOfSubSamplesInEachPlugArea %s",
                "help_string": "Number of continous index samples taken at each direction of lattice space for each plug volume."
            }
        ),
    ),
    (
        "atlasWarpingOff", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--atlasWarpingOff ",
                "help_string": "Deformable registration of atlas to subject"
            }
        ),
    ),
    (
        "gridSize", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--gridSize %s",
                "help_string": "Grid size for atlas warping with BSplines"
            }
        ),
    ),
    (
        "defaultSuffix", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--defaultSuffix %s"
            }
        ),
    ),
    (
        "implicitOutputs", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--implicitOutputs %s...",
                "help_string": "Outputs to be made available to NiPype. Needed because not all BRAINSABC outputs have command line arguments."
            }
        ),
    ),
    (
        "debuglevel", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--debuglevel %d",
                "help_string": "Display debug messages, and produce debug intermediate results.  0=OFF, 1=Minimal, 10=Maximum debugging."
            }
        ),
    ),
    (
        "writeLess", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--writeLess ",
                "help_string": "Does not write posteriors and filtered, bias corrected images"
            }
        ),
    ),
    (
        "numberOfThreads", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--numberOfThreads %d",
                "help_string": "Explicitly specify the maximum number of threads to use."
            }
        ),
    ),
]

output_fields = [
    (
        "saveState", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "(optional) Filename to which save the final state of the registration",
                "exists": True
            }
        ),
    ),
    (
        "outputDir", 
        attr.ib(
            type=Directory,
            metadata={
                "help_string": "Ouput directory",
                "exists": True
            }
        ),
    ),
    (
        "atlasToSubjectTransform", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "The transform from atlas to the subject",
                "exists": True
            }
        ),
    ),
    (
        "atlasToSubjectInitialTransform", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "The initial transform from atlas to the subject",
                "exists": True
            }
        ),
    ),
    (
        "outputVolumes", 
        attr.ib(
            type=OutputMultiPath,
            metadata={
                "help_string": "Corrected Output Images: should specify the same number of images as inputVolume, if only one element is given, then it is used as a file pattern where %s is replaced by the imageVolumeType, and %d by the index list location.",
                "exists": True
            }
        ),
    ),
    (
        "outputLabels", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Output Label Image",
                "exists": True
            }
        ),
    ),
    (
        "outputDirtyLabels", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Output Dirty Label Image",
                "exists": True
            }
        ),
    ),
    (
        "implicitOutputs", 
        attr.ib(
            type=OutputMultiPath,
            metadata={
                "help_string": "Outputs to be made available to NiPype. Needed because not all BRAINSABC outputs have command line arguments.",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

BRAINSABC_task = pydra.ShellCommandTask(
    name="BRAINSABC",
    executable=" BRAINSABC ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "inputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputVolume %s",
                "help_string": "The mask image to be cleaned up."
            }
        ),
    ),
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputVolume %s",
                "help_string": "The cleaned mask image."
            }
        ),
    ),
    (
        "numberOfThreads", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--numberOfThreads %d",
                "help_string": "Explicitly specify the maximum number of threads to use."
            }
        ),
    ),
]

output_fields = [
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "The cleaned mask image.",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

BRAINSCleanMask_task = pydra.ShellCommandTask(
    name="BRAINSCleanMask",
    executable=" BRAINSCleanMask ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "houghEyeDetectorMode", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--houghEyeDetectorMode %d",
                "help_string": ",                 This flag controls the mode of Hough eye detector.  By default, value of 1 is for T1W images, while the value of 0 is for T2W and PD images.,             "
            }
        ),
    ),
    (
        "inputTemplateModel", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputTemplateModel %s",
                "help_string": "User-specified template model.,             "
            }
        ),
    ),
    (
        "LLSModel", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--LLSModel %s",
                "help_string": "Linear least squares model filename in HD5 format"
            }
        ),
    ),
    (
        "inputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputVolume %s",
                "help_string": "Input image in which to find ACPC points"
            }
        ),
    ),
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputVolume %s",
                "help_string": "ACPC-aligned output image with the same voxels as the input image, but updated origin, and direction cosign so that the AC point would fall at the physical location (0.0,0.0,0.0), and the mid-sagital plane is the plane where physical L/R coordinate is 0.0. No interpolation method is involved to create the \'outputVolume\', and this output image is created using \'resample in place\' filter."
            }
        ),
    ),
    (
        "outputResampledVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputResampledVolume %s",
                "help_string": "ACPC-aligned output image in a resampled uniform isotropic space.  Currently this is a 1mm, 256^3 image with identity direction cosign. Choose desired interpolation mode to generate the outputResampledVolume."
            }
        ),
    ),
    (
        "outputTransform", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputTransform %s",
                "help_string": "The filename for the original space to ACPC alignment to be written (in .h5 format).,             "
            }
        ),
    ),
    (
        "outputLandmarksInInputSpace", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputLandmarksInInputSpace %s",
                "help_string": ",               The filename for the new subject-specific landmark definition file in the same format produced by Slicer3 (.fcsv) with the landmarks in the original image space (the detected RP, AC, PC, and VN4) in it to be written.,             "
            }
        ),
    ),
    (
        "outputLandmarksInACPCAlignedSpace", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputLandmarksInACPCAlignedSpace %s",
                "help_string": ",               The filename for the new subject-specific landmark definition file in the same format produced by Slicer3 (.fcsv) with the landmarks in the output image space (the detected RP, AC, PC, and VN4) in it to be written.,             "
            }
        ),
    ),
    (
        "outputMRML", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputMRML %s",
                "help_string": ",               The filename for the new subject-specific scene definition file in the same format produced by Slicer3 (in .mrml format). Only the components that were specified by the user on command line would be generated. Compatible components include inputVolume, outputVolume, outputLandmarksInInputSpace, outputLandmarksInACPCAlignedSpace, and outputTransform.,             "
            }
        ),
    ),
    (
        "outputVerificationScript", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputVerificationScript %s",
                "help_string": ",               The filename for the Slicer3 script that verifies the aligned landmarks against the aligned image file.  This will happen only in conjunction with saveOutputLandmarks and an outputVolume.,             "
            }
        ),
    ),
    (
        "mspQualityLevel", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--mspQualityLevel %d",
                "help_string": ",                 Flag cotrols how agressive the MSP is estimated. 0=quick estimate (9 seconds), 1=normal estimate (11 seconds), 2=great estimate (22 seconds), 3=best estimate (58 seconds), NOTE: -1= Prealigned so no estimate!.,             "
            }
        ),
    ),
    (
        "otsuPercentileThreshold", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--otsuPercentileThreshold %f",
                "help_string": ",                 This is a parameter to FindLargestForegroundFilledMask, which is employed when acLowerBound is set and an outputUntransformedClippedVolume is requested.,             "
            }
        ),
    ),
    (
        "acLowerBound", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--acLowerBound %f",
                "help_string": ",                 When generating a resampled output image, replace the image with the BackgroundFillValue everywhere below the plane This Far in physical units (millimeters) below (inferior to) the AC point (as found by the model.)  The oversize default was chosen to have no effect.  Based on visualizing a thousand masks in the IPIG study, we recommend a limit no smaller than 80.0 mm.,             "
            }
        ),
    ),
    (
        "cutOutHeadInOutputVolume", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--cutOutHeadInOutputVolume ",
                "help_string": ",                 Flag to cut out just the head tissue when producing an (un)transformed clipped volume.,             "
            }
        ),
    ),
    (
        "outputUntransformedClippedVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputUntransformedClippedVolume %s",
                "help_string": "Output image in which to store neck-clipped input image, with the use of --acLowerBound and maybe --cutOutHeadInUntransformedVolume."
            }
        ),
    ),
    (
        "rescaleIntensities", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--rescaleIntensities ",
                "help_string": ",                 Flag to turn on rescaling image intensities on input.,             "
            }
        ),
    ),
    (
        "trimRescaledIntensities", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--trimRescaledIntensities %f",
                "help_string": ",                 Turn on clipping the rescaled image one-tailed on input.  Units of standard deviations above the mean.  Very large values are very permissive.  Non-positive value turns clipping off.  Defaults to removing 0.00001 of a normal tail above the mean.,             "
            }
        ),
    ),
    (
        "rescaleIntensitiesOutputRange", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--rescaleIntensitiesOutputRange %s",
                "help_string": ",                 This pair of integers gives the lower and upper bounds on the signal portion of the output image.  Out-of-field voxels are taken from BackgroundFillValue.,             "
            }
        ),
    ),
    (
        "BackgroundFillValue", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--BackgroundFillValue %s",
                "help_string": "Fill the background of image with specified short int value. Enter number or use BIGNEG for a large negative number."
            }
        ),
    ),
    (
        "interpolationMode", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--interpolationMode %s",
                "help_string": "Type of interpolation to be used when applying transform to moving volume to create OutputResampledVolume.  Options are Linear, NearestNeighbor, BSpline, or WindowedSinc"
            }
        ),
    ),
    (
        "forceACPoint", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--forceACPoint %s",
                "help_string": ",                 Manually specify the AC point from the original image in RAS coordinates (i.e. Slicer coordinates).,             "
            }
        ),
    ),
    (
        "forcePCPoint", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--forcePCPoint %s",
                "help_string": ",                 Manually specify the PC point from the original image in RAS coordinates (i.e. Slicer coordinates).,             "
            }
        ),
    ),
    (
        "forceVN4Point", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--forceVN4Point %s",
                "help_string": ",                 Manually specify the VN4 point from the original image in RAS coordinates (i.e. Slicer coordinates).,             "
            }
        ),
    ),
    (
        "forceRPPoint", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--forceRPPoint %s",
                "help_string": ",                 Manually specify the RP point from the original image in RAS coordinates (i.e. Slicer coordinates).,             "
            }
        ),
    ),
    (
        "inputLandmarksEMSP", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputLandmarksEMSP %s",
                "help_string": ",               The filename for the new subject-specific landmark definition file in the same format produced by Slicer3 (in .fcsv) with the landmarks in the estimated MSP aligned space to be loaded. The detector will only process landmarks not enlisted on the file.,             "
            }
        ),
    ),
    (
        "forceHoughEyeDetectorReportFailure", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--forceHoughEyeDetectorReportFailure ",
                "help_string": ",                 Flag indicates whether the Hough eye detector should report failure,             "
            }
        ),
    ),
    (
        "rmpj", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--rmpj %f",
                "help_string": ",               Search radius for MPJ in unit of mm,             "
            }
        ),
    ),
    (
        "rac", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--rac %f",
                "help_string": ",               Search radius for AC in unit of mm,             "
            }
        ),
    ),
    (
        "rpc", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--rpc %f",
                "help_string": ",               Search radius for PC in unit of mm,             "
            }
        ),
    ),
    (
        "rVN4", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--rVN4 %f",
                "help_string": ",               Search radius for VN4 in unit of mm,             "
            }
        ),
    ),
    (
        "debug", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--debug ",
                "help_string": ",               Show internal debugging information.,             "
            }
        ),
    ),
    (
        "verbose", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--verbose ",
                "help_string": ",               Show more verbose output,             "
            }
        ),
    ),
    (
        "writeBranded2DImage", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--writeBranded2DImage %s",
                "help_string": ",               The filename for the 2D .png branded midline debugging image.  This will happen only in conjunction with requesting an outputVolume.,             "
            }
        ),
    ),
    (
        "resultsDir", 
        attr.ib(
            type=Directory,
            metadata={
                "argstr": "--resultsDir %s",
                "help_string": ",               The directory for the debuging images to be written.,             "
            }
        ),
    ),
    (
        "writedebuggingImagesLevel", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--writedebuggingImagesLevel %d",
                "help_string": ",                 This flag controls if debugging images are produced.  By default value of 0 is no images.  Anything greater than zero will be increasing level of debugging images.,             "
            }
        ),
    ),
    (
        "numberOfThreads", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--numberOfThreads %d",
                "help_string": "Explicitly specify the maximum number of threads to use."
            }
        ),
    ),
    (
        "atlasVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--atlasVolume %s",
                "help_string": "Atlas volume image to be used for BRAINSFit registration to redefine the final ACPC-aligned transform by registering original input image to the Atlas image. The initial registration transform is created by passing BCD_ACPC_Landmarks and atlasLandmarks to BRAINSLandmarkInitializer. This flag should be used with atlasLandmarks and atlasLandmarkWeights flags. Note that using this flag causes that AC point in the final acpcLandmark file not be exactly placed at 0,0,0 coordinates.,             "
            }
        ),
    ),
    (
        "atlasLandmarks", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--atlasLandmarks %s",
                "help_string": "Atlas landmarks to be used for BRAINSFit registration initialization,             "
            }
        ),
    ),
    (
        "atlasLandmarkWeights", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--atlasLandmarkWeights %s",
                "help_string": "Weights associated with atlas landmarks to be used for BRAINSFit registration initialization,             "
            }
        ),
    ),
]

output_fields = [
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "ACPC-aligned output image with the same voxels as the input image, but updated origin, and direction cosign so that the AC point would fall at the physical location (0.0,0.0,0.0), and the mid-sagital plane is the plane where physical L/R coordinate is 0.0. No interpolation method is involved to create the \'outputVolume\', and this output image is created using \'resample in place\' filter.",
                "exists": True
            }
        ),
    ),
    (
        "outputResampledVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "ACPC-aligned output image in a resampled uniform isotropic space.  Currently this is a 1mm, 256^3 image with identity direction cosign. Choose desired interpolation mode to generate the outputResampledVolume.",
                "exists": True
            }
        ),
    ),
    (
        "outputTransform", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "The filename for the original space to ACPC alignment to be written (in .h5 format).,             ",
                "exists": True
            }
        ),
    ),
    (
        "outputLandmarksInInputSpace", 
        attr.ib(
            type=File,
            metadata={
                "help_string": ",               The filename for the new subject-specific landmark definition file in the same format produced by Slicer3 (.fcsv) with the landmarks in the original image space (the detected RP, AC, PC, and VN4) in it to be written.,             ",
                "exists": True
            }
        ),
    ),
    (
        "outputLandmarksInACPCAlignedSpace", 
        attr.ib(
            type=File,
            metadata={
                "help_string": ",               The filename for the new subject-specific landmark definition file in the same format produced by Slicer3 (.fcsv) with the landmarks in the output image space (the detected RP, AC, PC, and VN4) in it to be written.,             ",
                "exists": True
            }
        ),
    ),
    (
        "outputMRML", 
        attr.ib(
            type=File,
            metadata={
                "help_string": ",               The filename for the new subject-specific scene definition file in the same format produced by Slicer3 (in .mrml format). Only the components that were specified by the user on command line would be generated. Compatible components include inputVolume, outputVolume, outputLandmarksInInputSpace, outputLandmarksInACPCAlignedSpace, and outputTransform.,             ",
                "exists": True
            }
        ),
    ),
    (
        "outputVerificationScript", 
        attr.ib(
            type=File,
            metadata={
                "help_string": ",               The filename for the Slicer3 script that verifies the aligned landmarks against the aligned image file.  This will happen only in conjunction with saveOutputLandmarks and an outputVolume.,             ",
                "exists": True
            }
        ),
    ),
    (
        "outputUntransformedClippedVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Output image in which to store neck-clipped input image, with the use of --acLowerBound and maybe --cutOutHeadInUntransformedVolume.",
                "exists": True
            }
        ),
    ),
    (
        "writeBranded2DImage", 
        attr.ib(
            type=File,
            metadata={
                "help_string": ",               The filename for the 2D .png branded midline debugging image.  This will happen only in conjunction with requesting an outputVolume.,             ",
                "exists": True
            }
        ),
    ),
    (
        "resultsDir", 
        attr.ib(
            type=Directory,
            metadata={
                "help_string": ",               The directory for the debuging images to be written.,             ",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

BRAINSConstellationDetector_task = pydra.ShellCommandTask(
    name="BRAINSConstellationDetector",
    executable=" BRAINSConstellationDetector ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "inputProbabilityVolume", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--inputProbabilityVolume %s...",
                "help_string": "The list of proobabilityimages."
            }
        ),
    ),
    (
        "priorLabelCodes", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--priorLabelCodes %s",
                "help_string": "A list of PriorLabelCode values used for coding the output label images"
            }
        ),
    ),
    (
        "foregroundPriors", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--foregroundPriors %s",
                "help_string": "A list: For each Prior Label, 1 if foreground, 0 if background"
            }
        ),
    ),
    (
        "nonAirRegionMask", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--nonAirRegionMask %s",
                "help_string": "a mask representing the \'NonAirRegion\' -- Just force pixels in this region to zero"
            }
        ),
    ),
    (
        "inclusionThreshold", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--inclusionThreshold %f",
                "help_string": "tolerance for inclusion"
            }
        ),
    ),
    (
        "dirtyLabelVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--dirtyLabelVolume %s",
                "help_string": "the labels prior to cleaning"
            }
        ),
    ),
    (
        "cleanLabelVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--cleanLabelVolume %s",
                "help_string": "the foreground labels volume"
            }
        ),
    ),
]

output_fields = [
    (
        "dirtyLabelVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "the labels prior to cleaning",
                "exists": True
            }
        ),
    ),
    (
        "cleanLabelVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "the foreground labels volume",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

BRAINSCreateLabelMapFromProbabilityMaps_task = pydra.ShellCommandTask(
    name="BRAINSCreateLabelMapFromProbabilityMaps",
    executable=" BRAINSCreateLabelMapFromProbabilityMaps ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "inputCompositeT1Volume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputCompositeT1Volume %s",
                "help_string": "Composite T1, all label maps transofrmed into the space for this image."
            }
        ),
    ),
    (
        "inputLabelVolume", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--inputLabelVolume %s...",
                "help_string": "The list of proobabilityimages."
            }
        ),
    ),
    (
        "inputTransform", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--inputTransform %s...",
                "help_string": "transforms to apply to label volumes"
            }
        ),
    ),
    (
        "labelForUndecidedPixels", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--labelForUndecidedPixels %d",
                "help_string": "Label for undecided pixels"
            }
        ),
    ),
    (
        "resampledVolumePrefix", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--resampledVolumePrefix %s",
                "help_string": "if given, write out resampled volumes with this prefix"
            }
        ),
    ),
    (
        "skipResampling", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--skipResampling ",
                "help_string": "Omit resampling images into reference space"
            }
        ),
    ),
    (
        "outputMultiSTAPLE", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputMultiSTAPLE %s",
                "help_string": "the MultiSTAPLE average of input label volumes"
            }
        ),
    ),
    (
        "outputConfusionMatrix", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputConfusionMatrix %s",
                "help_string": "Confusion Matrix"
            }
        ),
    ),
]

output_fields = [
    (
        "outputMultiSTAPLE", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "the MultiSTAPLE average of input label volumes",
                "exists": True
            }
        ),
    ),
    (
        "outputConfusionMatrix", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Confusion Matrix",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

BRAINSMultiSTAPLE_task = pydra.ShellCommandTask(
    name="BRAINSMultiSTAPLE",
    executable=" BRAINSMultiSTAPLE ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "inputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputVolume %s",
                "help_string": "The input image for finding the largest region filled mask."
            }
        ),
    ),
    (
        "outputROIMaskVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputROIMaskVolume %s",
                "help_string": "The ROI automatically found from the input image."
            }
        ),
    ),
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputVolume %s",
                "help_string": "The inputVolume with optional [maskOutput|cropOutput] to the region of the brain mask."
            }
        ),
    ),
    (
        "maskOutput", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--maskOutput ",
                "help_string": "The inputVolume multiplied by the ROI mask."
            }
        ),
    ),
    (
        "cropOutput", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--cropOutput ",
                "help_string": "The inputVolume cropped to the region of the ROI mask."
            }
        ),
    ),
    (
        "otsuPercentileThreshold", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--otsuPercentileThreshold %f",
                "help_string": "Parameter to the Otsu threshold algorithm."
            }
        ),
    ),
    (
        "thresholdCorrectionFactor", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--thresholdCorrectionFactor %f",
                "help_string": "A factor to scale the Otsu algorithm's result threshold, in case clipping mangles the image."
            }
        ),
    ),
    (
        "closingSize", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--closingSize %f",
                "help_string": "The Closing Size (in millimeters) for largest connected filled mask.  This value is divided by image spacing and rounded to the next largest voxel number."
            }
        ),
    ),
    (
        "ROIAutoDilateSize", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--ROIAutoDilateSize %f",
                "help_string": "This flag is only relavent when using ROIAUTO mode for initializing masks.  It defines the final dilation size to capture a bit of background outside the tissue region.  At setting of 10mm has been shown to help regularize a BSpline registration type so that there is some background constraints to match the edges of the head better."
            }
        ),
    ),
    (
        "outputVolumePixelType", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--outputVolumePixelType %s",
                "help_string": "The output image Pixel Type is the scalar datatype for representation of the Output Volume."
            }
        ),
    ),
    (
        "numberOfThreads", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--numberOfThreads %d",
                "help_string": "Explicitly specify the maximum number of threads to use."
            }
        ),
    ),
]

output_fields = [
    (
        "outputROIMaskVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "The ROI automatically found from the input image.",
                "exists": True
            }
        ),
    ),
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "The inputVolume with optional [maskOutput|cropOutput] to the region of the brain mask.",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

BRAINSROIAuto_task = pydra.ShellCommandTask(
    name="BRAINSROIAuto",
    executable=" BRAINSROIAuto ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "inputBinaryVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputBinaryVolume %s",
                "help_string": "Input binary image in which to be edited"
            }
        ),
    ),
    (
        "outputBinaryVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputBinaryVolume %s",
                "help_string": "Output binary image in which to be edited"
            }
        ),
    ),
    (
        "inputLandmarksFilename", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputLandmarksFilename %s",
                "help_string": " The filename for the  landmark definition file in the same format produced by Slicer3 (.fcsv). "
            }
        ),
    ),
    (
        "inputLandmarkNames", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--inputLandmarkNames %s",
                "help_string": " A target input landmark name to be edited. This should be listed in the inputLandmakrFilename Given. "
            }
        ),
    ),
    (
        "setCutDirectionForLandmark", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--setCutDirectionForLandmark %s",
                "help_string": "Setting the cutting out direction of the input binary image to the one of anterior, posterior, left, right, superior or posterior. (ENUMERATION: ANTERIOR, POSTERIOR, LEFT, RIGHT, SUPERIOR, POSTERIOR) "
            }
        ),
    ),
    (
        "setCutDirectionForObliquePlane", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--setCutDirectionForObliquePlane %s",
                "help_string": "If this is true, the mask will be thresholded out to the direction of inferior, posterior,  and/or left. Default behavrior is that cutting out to the direction of superior, anterior and/or right. "
            }
        ),
    ),
    (
        "inputLandmarkNamesForObliquePlane", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--inputLandmarkNamesForObliquePlane %s",
                "help_string": " Three subset landmark names of inputLandmarksFilename for a oblique plane computation. The plane computed for binary volume editing. "
            }
        ),
    ),
]

output_fields = [
    (
        "outputBinaryVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Output binary image in which to be edited",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

BinaryMaskEditorBasedOnLandmarks_task = pydra.ShellCommandTask(
    name="BinaryMaskEditorBasedOnLandmarks",
    executable=" BinaryMaskEditorBasedOnLandmarks ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "inputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--inputVolume %s",
                "help_string": "Input Label Volume"
            }
        ),
    ),
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputVolume %s",
                "help_string": "Output Label Volume"
            }
        ),
    ),
    (
        "low", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--low %d",
                "help_string": "The lower bound of the labels to be used."
            }
        ),
    ),
    (
        "high", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--high %d",
                "help_string": "The higher bound of the labels to be used."
            }
        ),
    ),
    (
        "closingSize", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--closingSize %d",
                "help_string": "The closing size for hole filling."
            }
        ),
    ),
    (
        "openingSize", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--openingSize %d",
                "help_string": "The opening size for hole filling."
            }
        ),
    ),
    (
        "safetySize", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--safetySize %d",
                "help_string": "The safetySize size for the clipping region."
            }
        ),
    ),
    (
        "preserveOutside", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--preserveOutside ",
                "help_string": "For values outside the specified range, preserve those values."
            }
        ),
    ),
    (
        "numberOfThreads", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--numberOfThreads %d",
                "help_string": "Explicitly specify the maximum number of threads to use."
            }
        ),
    ),
]

output_fields = [
    (
        "outputVolume", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Output Label Volume",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

ESLR_task = pydra.ShellCommandTask(
    name="ESLR",
    executable=" ESLR ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "expectedVolume", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--expectedVolume %f",
                "help_string": "The approximate volume of the object, in mL."
            }
        ),
    ),
    (
        "intensityHomogeneity", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--intensityHomogeneity %f",
                "help_string": "What is the homogeneity of intensity within the object? Given constant intensity at 1.0 score and extreme fluctuating intensity at 0."
            }
        ),
    ),
    (
        "curvatureWeight", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--curvatureWeight %f",
                "help_string": "Given sphere 1.0 score and extreme rough bounday/surface 0 score, what is the expected smoothness of the object?"
            }
        ),
    ),
    (
        "labelValue", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--labelValue %d",
                "help_string": "Label value of the output image"
            }
        ),
    ),
    (
        "maxRunningTime", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--maxRunningTime %f",
                "help_string": "The program will stop if this time is reached."
            }
        ),
    ),
    (
        "originalImageFileName", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Original image to be segmented",
                "position": -3
            }
        ),
    ),
    (
        "labelImageFileName", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Label image for initialization",
                "position": -2
            }
        ),
    ),
    (
        "segmentedImageFileName", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "%s",
                "help_string": "Segmented image",
                "position": -1
            }
        ),
    ),
]

output_fields = [
    (
        "segmentedImageFileName", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Segmented image",
                "position": -1,
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

RobustStatisticsSegmenter_task = pydra.ShellCommandTask(
    name="RobustStatisticsSegmenter",
    executable=" RobustStatisticsSegmenter ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "t1Volume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--t1Volume %s",
                "help_string": "T1 Volume"
            }
        ),
    ),
    (
        "t2Volume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--t2Volume %s",
                "help_string": "T2 Volume"
            }
        ),
    ),
    (
        "pdVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--pdVolume %s",
                "help_string": "PD Volume"
            }
        ),
    ),
    (
        "templateVolume", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--templateVolume %s",
                "help_string": "template Volume"
            }
        ),
    ),
    (
        "priorsList", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--priorsList %s",
                "help_string": " number of input should same to the number of priorsList"
            }
        ),
    ),
    (
        "priorsWeightList", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--priorsWeightList %s",
                "help_string": " number of input should same to the number of priorsList"
            }
        ),
    ),
    (
        "likelihoodTolerance", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--likelihoodTolerance %f",
                "help_string": " a convergence parameter (0 indicates take the default from the EMSegmentationFilter constructor.)"
            }
        ),
    ),
    (
        "warp", 
        attr.ib(
            type=traits.Bool,
            metadata={
                "argstr": "--warp "
            }
        ),
    ),
    (
        "degreeOfBiasFieldCorrection", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--degreeOfBiasFieldCorrection %d"
            }
        ),
    ),
    (
        "maxIteration", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--maxIteration %d"
            }
        ),
    ),
    (
        "OutputFileNamePrefix", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--OutputFileNamePrefix %s"
            }
        ),
    ),
    (
        "inputPixelType", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--inputPixelType %s",
                "help_string": "Input Type"
            }
        ),
    ),
    (
        "outputPixelType", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--outputPixelType %s",
                "help_string": "Input Type"
            }
        ),
    ),
    (
        "priorPixelType", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--priorPixelType %s",
                "help_string": "prior Type"
            }
        ),
    ),
]

output_fields = [
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))


simpleEM_task = pydra.ShellCommandTask(
    name="simpleEM",
    executable=" simpleEM ", 
    input_spec=input_spec_pdr,
    
)