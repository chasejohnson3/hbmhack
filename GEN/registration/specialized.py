# -*- coding: utf-8 -*-
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

import pydra
from pydra.engine import specs
import attr


input_fields = [
    (
        "acpc", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--acpc %s...",
                "help_string": "ACPC line, a list of two fiducial points, one at the anterior commissure and one at the posterior commissure."
            }
        ),
    ),
    (
        "midline", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--midline %s...",
                "help_string": "The midline is a series of points (at least 3) defining the division between the hemispheres of the brain (the mid sagittal plane)."
            }
        ),
    ),
    (
        "outputTransform", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--outputTransform %s",
                "help_string": "A transform filled in from the ACPC and Midline registration calculation."
            }
        ),
    ),
]

output_fields = [
    (
        "outputTransform", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "A transform filled in from the ACPC and Midline registration calculation.",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

ACPCTransform_task = pydra.ShellCommandTask(
    name="ACPCTransform",
    executable=" ACPCTransform ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "fixedLandmarks", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--fixedLandmarks %s...",
                "help_string": "Ordered list of landmarks in the fixed image"
            }
        ),
    ),
    (
        "movingLandmarks", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--movingLandmarks %s...",
                "help_string": "Ordered list of landmarks in the moving image"
            }
        ),
    ),
    (
        "saveTransform", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--saveTransform %s",
                "help_string": "Save the transform that results from registration"
            }
        ),
    ),
    (
        "transformType", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--transformType %s",
                "help_string": "Type of transform to produce"
            }
        ),
    ),
    (
        "fixedLandmarksFile", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--fixedLandmarksFile %s",
                "help_string": "An fcsv formatted file with a list of landmark points."
            }
        ),
    ),
    (
        "movingLandmarksFile", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--movingLandmarksFile %s",
                "help_string": "An fcsv formatted file with a list of landmark points."
            }
        ),
    ),
    (
        "numberOfThreads", 
        attr.ib(
            type=traits.Int,
            metadata={
                "argstr": "--numberOfThreads %d",
                "help_string": "Explicitly specify the maximum number of threads to use."
            }
        ),
    ),
]

output_fields = [
    (
        "saveTransform", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Save the transform that results from registration",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

BRAINSTransformFromFiducials_task = pydra.ShellCommandTask(
    name="BRAINSTransformFromFiducials",
    executable=" BRAINSTransformFromFiducials ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)

input_fields = [
    (
        "fixedLandmarks", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--fixedLandmarks %s...",
                "help_string": "Ordered list of landmarks in the fixed image"
            }
        ),
    ),
    (
        "movingLandmarks", 
        attr.ib(
            type=InputMultiPath,
            metadata={
                "argstr": "--movingLandmarks %s...",
                "help_string": "Ordered list of landmarks in the moving image"
            }
        ),
    ),
    (
        "saveTransform", 
        attr.ib(
            type=File,
            metadata={
                "argstr": "--saveTransform %s",
                "help_string": "Save the transform that results from registration"
            }
        ),
    ),
    (
        "transformType", 
        attr.ib(
            type=traits.Enum,
            metadata={
                "argstr": "--transformType %s",
                "help_string": "Type of transform to produce"
            }
        ),
    ),
    (
        "rms", 
        attr.ib(
            type=traits.Float,
            metadata={
                "argstr": "--rms %f",
                "help_string": "Display RMS Error."
            }
        ),
    ),
    (
        "outputMessage", 
        attr.ib(
            type=traits.Str,
            metadata={
                "argstr": "--outputMessage %s",
                "help_string": "Provides more information on the output"
            }
        ),
    ),
]

output_fields = [
    (
        "saveTransform", 
        attr.ib(
            type=File,
            metadata={
                "help_string": "Save the transform that results from registration",
                "exists": True
            }
        ),
    ),
]

input_spec_pdr = specs.SpecInfo(name="Input", fields=input_fields, bases=(specs.ShellSpec,))
output_spec_pdr = specs.SpecInfo(name="Output", fields=output_fields, bases=(specs.ShellSpec,))

FiducialRegistration_task = pydra.ShellCommandTask(
    name="FiducialRegistration",
    executable=" FiducialRegistration ", 
    input_spec=input_spec_pdr,
    output_spec=output_spec_pdr
)